name: Changes

on:
  workflow_dispatch:
    inputs:
      release:
        description: Release behavior
        default: false
        type: boolean
      all:
        description: Run for all
        default: false
        type: boolean
  workflow_call:
    inputs:
      all:
        description: Run for all
        default: false
        type: boolean
      release:
        description: Release behavior
        default: false
        type: boolean
      requires-file:
        description: This file must exist in the package
        type: string
    outputs:
      all-json:
        description: List of all changed packages as a JSON array
        value: ${{ jobs.changes.outputs.all-json }}
      modules-json:
        description: List of changed modules as a JSON array
        value: ${{ jobs.changes.outputs.modules-json }}
      apps-json:
        description: List of changed apps as a JSON array
        value: ${{ jobs.changes.outputs.apps-json }}
      docker-json:
        description: List of changed apps that should become images as a JSON array
        value: ${{ jobs.changes.outputs.docker-json }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      all-json: ${{ steps.changes.outputs.all-json }}
      modules-json: ${{ steps.changes.outputs.modules-json }}
      apps-json: ${{ steps.changes.outputs.apps-json }}
      docker-json: ${{ steps.changes.outputs.docker-json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - id: changes
        name: Detect changes
        shell: bash
        run: |
          set -x
          if [[ "${{ inputs.all }}" =~ [tT]rue ]]; then
            changed_packages="$(lerna exec --loglevel=silent -- 'echo $(cd ..; basename "$(pwd)")/$(basename "$(pwd)")' 2>/dev/null)"
          else
            since_param="--include-merged-tags"
            if [[ "${{ inputs.release }}" =~ [tT]rue ]]; then
              next_release_number="$(jq -r '.navinkumar.release.number' package.json)"
              if [[ $next_release_number -gt 1 ]]; then
                since_param="$(printf "r%s" "$(( next_release_number - 1 ))")"
              fi
            fi
            changed_packages="$(lerna exec --loglevel=silent --since $since_param -- 'echo $(cd ..; basename "$(pwd)")/$(basename "$(pwd)")' 2>/dev/null)"
          fi

          changed_modules_json="[]"
          changed_apps_json="[]"
          changed_docker_json="[]"
          changed_packages_json="[]"

          if [[ -n "$changed_packages" ]]; then
            if [[ -n "${{ inputs.requires-file }}" ]]; then
              echo "[changed-before-filter] $changed_packages"
              dir_filter() {
                for dir in $changed_packages; do
                  [[ -f "$dir/${{ inputs.requires-file }}" ]] && echo $dir
                done
              }
              changed_packages="$(dir_filter)"
              echo "[changed-after-filter] $changed_packages"
            fi
          fi

          if [[ -n "$changed_packages" ]]; then
            set +e
            changed_packages_json="$(echo "$changed_packages" | jq -R -s -c 'split("\n")[:-1]')"
            changed_apps="$(echo "$changed_packages" | grep '^apps')"
            if [[ -n "$changed_apps" ]]; then
              changed_apps_json="$(echo "$changed_apps" | jq -R -s -c 'split("\n")[:-1]')"
              docker_filter() {
                for dir in $changed_apps; do
                  [[ -f "$dir/Dockerfile" ]] && echo $dir
                done
              }
              changed_docker_json="$(docker_filter | jq -R -s -c 'split("\n")[:-1]')"
            fi
            changed_modules="$(echo "$changed_packages" | grep -v '^apps')"
            if [[ -n "$changed_modules" ]]; then
              changed_modules_json="$(echo "$changed_modules" | jq -R -s -c 'split("\n")[:-1]')"
            fi
            set -e
          fi

          echo "::notice::modules-json=$changed_modules_json"
          echo "::notice::apps-json=$changed_apps_json"
          echo "::notice::docker-json=$changed_docker_json"

          echo "all-json=$changed_packages_json" >> $GITHUB_OUTPUT
          echo "modules-json=$changed_modules_json" >> $GITHUB_OUTPUT
          echo "apps-json=$changed_apps_json" >> $GITHUB_OUTPUT
          echo "docker-json=$changed_docker_json" >> $GITHUB_OUTPUT