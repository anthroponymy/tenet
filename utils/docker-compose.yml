version: '3.9'
# Can use built-in: com.docker.compose.project
# instead of manual label: compose.project.name
# which is added to the volumes too.
volumes:
  mongo-data:
  postgres-data:
  influxdb-data:
  kafka-data:
  zookeeper-data:
services:
  redis:
    image: redis:7.0.2
    restart: unless-stopped
    ports:
      - 6379:6379
  mongo:
    image: mongo:4.4
    mem_limit: 2048m
    restart: unless-stopped
    ports:
      - 27017:27017
    volumes:
      - mongo-data:/data/db
    entrypoint: [ "/usr/bin/mongod", "--bind_ip_all", "--replSet", "rs0" ]
  rabbitmq:
    image: rabbitmq:3.11-management
    mem_limit: 1024m
    restart: unless-stopped
    ports:
      - 5672:5672
      - 15672:15672
      - 25672:25672
  postgres:
    image: postgres:10
    mem_limit: 1024m
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.2
    mem_limit: 1024m
    restart: unless-stopped
    ports:
      - 9300:9300
      - 9200:9200
    environment:
      cluster.name: test
      transport.host: 127.0.0.1
      http.host: 0.0.0.0
  kibana:
    image: docker.elastic.co/kibana/kibana:7.15.2
    mem_limit: 1024m
    restart: unless-stopped
    ports:
      - 5601:5601
  influxdb:
    image: influxdb:2.6.1
    mem_limit: 1024m
    restart: unless-stopped
    ports:
      - 8086:8086
    volumes:
      - influxdb-data:/root/.influxdb2

# Confluent Kafka

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.2
    restart: unless-stopped
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    volumes:
      - zookeeper-data:/var/lib/zookeeper

  kafka:
    image: confluentinc/cp-kafka:7.2.2
    ports:
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
      - "9092:9092"
    depends_on:
      - zookeeper
    restart: unless-stopped
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://${EXTERNAL_AND_INTERNAL_HOSTNAME}:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka-data:/var/lib/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092

  connect:
    image: confluentinc/cp-kafka-connect-base:7.2.2
    restart: unless-stopped
    build:
      context: .
      dockerfile: connect.Dockerfile
    ports:
      - "35000:35000"
      - 8083:8083
    depends_on:
      - zookeeper
      - kafka
    environment:
      KAFKA_JMX_PORT: 35000
      KAFKA_JMX_HOSTNAME: localhost
      CONNECT_BOOTSTRAP_SERVERS: "kafka:29092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect-cluster-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_ZOOKEEPER_CONNECT: "zookeeper:2181"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_CONNECTIONS_MAX_IDLE_MS: 180000
      CONNECT_METADATA_MAX_AGE_MS: 180000
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
